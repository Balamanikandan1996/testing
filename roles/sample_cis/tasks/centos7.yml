---
####REMEDY####
  - name: Create /etc/modprobe.d with root ownership 
    file: path=/etc/modprobe.d state=touch owner=root group=root mode=0600
    changed_when: false
    tags:
      - cramfs
      - 1.1.1.1
      - squashfs
      - 1.1.1.2
      - udf
      - 1.1.1.3
      - fat
      - 1.1.1.4 

  - name: 1.1.1.1-Fetch the cramfs value from ansible facts
    shell: echo "{{ ansible_local.cramfs_1111_audit.cramfs_1111_audit }}" 
    register: cramfs
    ignore_errors: True
    tags:
      - cramfs
      - 1.1.1.1
      - one
      - all

  - name: Insert query to test_table in db test_db
    postgresql_query:
      db: cis
      query: INSERT INTO linuxos (hostname, ipaddress, tag_name, values) VALUES ('{{ansible_nodename}}', '{{ansible_default_ipv4.address}}', 'cramfs', '{{ cramfs.stdout }}')
    tags:
      - cramfs
      - 1.1.1.1
      - one
      - all

  - name: 1.1.1.1 - Ensure mounting of cramfs filesystems is disabled
    lineinfile:
      path: /etc/modprobe.d/cramfs.conf
      line: "install cramfs /bin/true"
      state: present
      create: yes
    when: cramfs.stdout.find("FAILED") != -1
    tags:
      - cramfs
      - 1.1.1.1
      - one
      - all
      
  - name: 1.1.1.1 - Ensure mounting of cramfs filesystems is disabled
    shell: "rmmod cramfs"
    failed_when: no
    when: cramfs.stdout.find("FAILED") != -1
    tags:
      - cramfs
      - 1.1.1.1
      - one
      - all
      
  - name: 1.1.1.2-Fetch the squashfs  value from ansible facts
    shell: echo "{{ ansible_local.squashfs_1112_audit.squashfs_1112_audit }}" 
    register: squashfs
    ignore_errors: True
    tags:
      - squashfs
      - 1.1.1.2
      - one
      - all

  - name: Insert query to test_table in db test_db
    postgresql_query:
      db: cis
      query: INSERT INTO linuxos (hostname, ipaddress, tag_name, values) VALUES ('{{ansible_nodename}}', '{{ansible_default_ipv4.address}}', 'squashfs', '{{ squashfs.stdout }}')
    tags:
      - squashfs
      - 1.1.1.2
      - one
      - all

  - name: 1.1.1.2 - Ensure mounting of squashfs filesystem is disabled
    lineinfile:
      path: /etc/modprobe.d/squashfs.conf
      line: "install squashfs /bin/true"
      state: present
      create: yes
    when: squashfs.stdout.find("FAILED") != -1
    tags:
      - squashfs
      - 1.1.1.2
      - one
      - all
      
  - name: 1.1.1.2 - Ensure mounting of squashfs filesystems is disabled
    shell: "rmmod squashfs"
    failed_when: no
    when: squashfs.stdout.find("FAILED") != -1
    tags:
      - squashfs
      - 1.1.1.2
      - one
      - all

  - name:  1.1.1.3-Fetch the udf  value from ansible facts
    shell: echo "{{ ansible_local.udf_1113_audit.udf_1113_audit }}" 
    register: udf
    ignore_errors: True
    tags:
      - udf
      - 1.1.1.3
      - one
      - all

  - name: Insert query to test_table in db test_db
    postgresql_query:
      db: cis
      query: INSERT INTO linuxos (hostname, ipaddress, tag_name, values) VALUES ('{{ansible_nodename}}', '{{ansible_default_ipv4.address}}', 'udf', '{{ udf.stdout }}')
    tags:
      - udf
      - 1.1.1.3
      - one
      - all

  - name: 1.1.1.3 - Ensure mounting of udf filesystems is disabled
    lineinfile:
      path: /etc/modprobe.d/udf.conf
      line: "install udf /bin/true"
      state: present
      create: yes
    when: udf.stdout.find("FAILED") != -1
    tags:
      - udf
      - 1.1.1.3
      - one
      - all

  - name: 1.1.1.3 - Ensure mounting of udf filesystems is disabled
    shell: "rmmod udf"
    failed_when: no
    when: udf.stdout.find("FAILED") != -1
    tags:
      - udf
      - 1.1.1.3
      - one
      - all

  - name:  1.1.1.4-Fetch the fat  value from ansible facts
    shell: echo "{{ ansible_local.fat_1114_audit.fat_1114_audit }}" 
    register: fat
    ignore_errors: True
    tags:
      - fat
      - 1.1.1.4
      - one
      - all

  - name: Insert query to test_table in db test_db
    postgresql_query:
      db: cis
      query: INSERT INTO linuxos (hostname, ipaddress, tag_name, values) VALUES ('{{ansible_nodename}}', '{{ansible_default_ipv4.address}}', 'fat', '{{ fat.stdout }}')
    tags:
      - cramfs
      - 1.1.1.1
      - one
      - all

  - name: 1.1.1.4 Ensure mounting of FAT filesystems is limited
    lineinfile:
      path: /etc/modprobe.d/fat.conf
      line: "{{item}}"
      state: present
      create: yes
    with_items:
      - "install fat /bin/true"
      - "install vfat /bin/true"
      - "install msdos /bin/true"
    when: fat.stdout.find("FAILED") != -1
    tags:
      - fat
      - 1.1.1.4
      - one
      - all
      
  - name: 1.1.1.4 Ensure mounting of FAT filesystems is limited
    command: "{{item}}"
    with_items:
      - "rmmod msdos"
      - "rmmod vfat" 
      - "rmmod fat"    
    failed_when: no  
    when: fat.stdout.find("FAILED") != -1
    tags:
      - fat
      - 1.1.1.4
      - one
      - all      